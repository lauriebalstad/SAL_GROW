scale_color_manual(values = c("#33638d", "gray75", "#95d840")) +
scale_linewidth_manual(values = c(1.5)) +
coord_cartesian(ylim = c(0, 18)) + # force fixed axis
theme_classic() + theme(text = element_text(size = 14),
legend.position = "bottom")
})
}
shinyApp(ui, server) # run the shiny
#' issues:
#' one river not working???
cards <- list(
# one river output
card(full_screen = TRUE,
card_header("Coho salmon growth"),
plotOutput(outputId = "prey_river_plot")),
card(full_screen = TRUE,
card_header("Coho salmon growth"),
plotOutput(outputId = "one_river_plot")),
# two river output
card(full_screen = TRUE,
card_header("Coho salmon growth"),
plotOutput(outputId = "two_river_plot"))
)
# for ui/server: https://shiny.posit.co/r/gallery/application-layout/shiny-theme-selector/
prey_amount <- sliderInput(
inputId = "prey_amount",
label = "Prey amount (qualitative):",
min = 1, max = 100,
value = 48, step = 0.5
)
prey_quality <- sliderInput(
inputId = "prey_quality",
label = "Prey quality (percent non-digestable):",
min = 0, max = 100,
value = 26, step = 0.5
)
rain_temp <- sliderInput(
inputId = "rain_temp",
label = "Rain river temperature:",
min = 46, max = 72,
value = 53, step = 0.5
)
glcr_temp <- sliderInput(
inputId = "glcr_temp",
label = "Glacier river temperature:",
min = 35, max = 61,
value = 39, step = 0.5
)
prop_glcr <- sliderInput(
inputId = "prop_glcr",
label = "Percent glacial streams:",
min = 0, max = 100,
value = 27, step = 0.5
)
ui = tagList(
# shinythemes::themeSelector(),
navbarPage(
theme = shinythemes::shinytheme("yeti"),
"Understanding SEAK Coho salmon growth",
tabPanel("About",
htmlOutput(outputId = "about_text") # drop in text
),
tabPanel("Lesson plans",
htmlOutput(outputId = "lesson_text") # drop in text
),
tabPanel("Prey quality",
sidebarPanel(
prey_amount,
prey_quality
),
mainPanel(cards[[1]],
htmlOutput(outputId = "prey_quality_text"))
),
tabPanel("Temperature & consumption",
sidebarPanel(
rain_temp,
prey_amount
),
mainPanel(cards[[2]],
htmlOutput(outputId = "temp_consump_text"))
),
tabPanel("A warming world",
sidebarPanel(
rain_temp,
glcr_temp,
prop_glcr
),
mainPanel(cards[[3]],
htmlOutput(outputId = "warming_world_text"))
)
))
server <- function(input, output, session) {
# run simulation with reactive data
reactive_data <- reactive({
day_list <- 1:365
rain_cels <- (input$rain_temp-32)*5/9
glcr_cels <- (input$glcr_temp-32)*5/9
# make time series
# glacier temps flatter, around 4 degrees year round
# rain temps more seasonal, from 0-10 degrees
max_rain_temp <- rain_cels; sin_max_rain_temp <- max_rain_temp/2
rain_temps <- sin_max_rain_temp + 1 + sin_max_rain_temp*sin(day_list/67) + rnorm(365, 0, 1)
rain_temps[which(rain_temps < 0)] <- 0.001 # make sure all above 0
max_glcr_temp <- glcr_cels; sin_max_glcr_temp <- max_glcr_temp/2
glcr_temps <- sin_max_glcr_temp + 1 + sin_max_glcr_temp*sin(day_list/80 - 99) + rnorm(365, 0, 1)
glcr_temps[which(glcr_temps < 0)] <- 0.001 # make sure all above 0
# both have same amount of food generally, but glacier food comes earlier
# glacier food peaks in april-may, rain food peaks june-august
# rain things
max_prey_rain <- input$prey_amount/500 + 0.001
prey_index_rain <- max_prey_rain + 0.5 + max_prey_rain*sin(day_list/100+0.1) + rnorm(365, 0, 0.2)
prey_index_rain[which(prey_index_rain < 0)] <- 0.001 # make sure all above 0
prop_indg_rain <- rbinom(365, 100, input$prey_quality/100)/100
# glacier things -- same amount, diff period, but better quality food
max_prey_glcr <- input$prey_amount/500 + 0.001
prey_index_glcr <- max_prey_glcr + 0.5 + max_prey_glcr*sin(day_list/100+1) + rnorm(365, 0, 0.2)
prey_index_glcr[which(prey_index_glcr < 0)] <- 0.001 # make sure all above 0
prop_indg_glcr <- rbinom(365, 100, 0.1)/100
# run simulation
# rain river
sim_dat_rain <- coho_grow(rain_temps, prey_index_rain, prop_indg_rain, 365)
# glcr river
sim_dat_glcr <- coho_grow(glcr_temps, prey_index_glcr, prop_indg_glcr, 365)
# mixed river
sim_dat_combo <- move_grow(rain_temps, glcr_temps,
prey_index_rain, prey_index_glcr,
prop_indg_rain, prop_indg_glcr,
input$prop_glcr/100,
365)
dat_out <- data.frame(day = rep(1:length(sim_dat_combo), 3),
sal_size = c(sim_dat_rain, sim_dat_glcr, sim_dat_combo),
river_type = c(rep("Rain river", length(sim_dat_combo)),
rep("Glacier river", length(sim_dat_combo)),
rep("Movement between rivers", length(sim_dat_combo)))
)
return(dat_out)
})
output$prey_river_plot <- renderPlot({
plotData <- subset(reactive_data(), reactive_data()$river_type == "Rain river")
# reactive_data() %>% filter(river_type == "Rain river")
ggplot(plotData) +
geom_line(aes_string(x="day", y="sal_size", col="river_type")) +
labs(col="River type", y="Coho size (grams)") +
scale_color_manual(values = c("#95d840")) +
scale_linewidth_manual(values = c(1.5)) +
coord_cartesian(ylim = c(0, 18)) + # force fixed axis
theme_classic() + theme(text = element_text(size = 14),
legend.position = "bottom")
})
output$one_river_plot <- renderPlot({
plotData <- subset(reactive_data(), reactive_data()$river_type == "Rain river")
# reactive_data() %>% filter(river_type == "Rain river")
ggplot(plotData) +
geom_line(aes_string(x="day", y="sal_size", col="river_type")) +
labs(col="River type", y="Coho size (grams)") +
scale_color_manual(values = c("#95d840")) +
scale_linewidth_manual(values = c(1.5)) +
coord_cartesian(ylim = c(0, 18)) + # force fixed axis
theme_classic() + theme(text = element_text(size = 14),
legend.position = "bottom")
})
output$temp_consump_text <- renderText(includeHTML("temp_consump_text.html"))
output$two_river_plot <- renderPlot({
ggplot(reactive_data()) +
geom_line(aes_string(x="day", y="sal_size", col="river_type")) +
labs(col="River type", y="Coho size (grams)") +
scale_color_manual(values = c("#33638d", "gray75", "#95d840")) +
scale_linewidth_manual(values = c(1.5)) +
coord_cartesian(ylim = c(0, 18)) + # force fixed axis
theme_classic() + theme(text = element_text(size = 14),
legend.position = "bottom")
})
}
shinyApp(ui, server) # run the shiny
#' issues:
#' one river not working???
cards <- list(
# one river output
card(full_screen = TRUE,
card_header("Coho salmon growth"),
plotOutput(outputId = "prey_river_plot")),
card(full_screen = TRUE,
card_header("Coho salmon growth"),
plotOutput(outputId = "one_river_plot")),
# two river output
card(full_screen = TRUE,
card_header("Coho salmon growth"),
plotOutput(outputId = "two_river_plot"))
)
# for ui/server: https://shiny.posit.co/r/gallery/application-layout/shiny-theme-selector/
prey_amount <- sliderInput(
inputId = "prey_amount",
label = "Prey amount (qualitative):",
min = 1, max = 100,
value = 48, step = 0.5
)
prey_quality <- sliderInput(
inputId = "prey_quality",
label = "Prey quality (percent non-digestable):",
min = 0, max = 100,
value = 26, step = 0.5
)
rain_temp <- sliderInput(
inputId = "rain_temp",
label = "Rain river temperature:",
min = 46, max = 72,
value = 53, step = 0.5
)
glcr_temp <- sliderInput(
inputId = "glcr_temp",
label = "Glacier river temperature:",
min = 35, max = 61,
value = 39, step = 0.5
)
prop_glcr <- sliderInput(
inputId = "prop_glcr",
label = "Percent glacial streams:",
min = 0, max = 100,
value = 27, step = 0.5
)
ui = tagList(
# shinythemes::themeSelector(),
navbarPage(
theme = shinythemes::shinytheme("yeti"),
"Understanding SEAK Coho salmon growth",
tabPanel("About",
htmlOutput(outputId = "about_text") # drop in text
),
tabPanel("Lesson plans",
htmlOutput(outputId = "lesson_text") # drop in text
),
tabPanel("Prey quality",
sidebarPanel(
prey_amount,
prey_quality
),
mainPanel(cards[[1]],
htmlOutput(outputId = "prey_quality_text"))
),
tabPanel("Temperature & consumption",
sidebarPanel(
rain_temp,
prey_amount
),
mainPanel(cards[[2]],
htmlOutput(outputId = "temp_consump_text"))
),
tabPanel("A warming world",
sidebarPanel(
rain_temp,
glcr_temp,
prop_glcr
),
mainPanel(cards[[3]],
htmlOutput(outputId = "warming_world_text"))
)
))
server <- function(input, output, session) {
# run simulation with reactive data
reactive_data <- reactive({
day_list <- 1:365
rain_cels <- (input$rain_temp-32)*5/9
glcr_cels <- (input$glcr_temp-32)*5/9
# make time series
# glacier temps flatter, around 4 degrees year round
# rain temps more seasonal, from 0-10 degrees
max_rain_temp <- rain_cels; sin_max_rain_temp <- max_rain_temp/2
rain_temps <- sin_max_rain_temp + 1 + sin_max_rain_temp*sin(day_list/67) + rnorm(365, 0, 1)
rain_temps[which(rain_temps < 0)] <- 0.001 # make sure all above 0
max_glcr_temp <- glcr_cels; sin_max_glcr_temp <- max_glcr_temp/2
glcr_temps <- sin_max_glcr_temp + 1 + sin_max_glcr_temp*sin(day_list/80 - 99) + rnorm(365, 0, 1)
glcr_temps[which(glcr_temps < 0)] <- 0.001 # make sure all above 0
# both have same amount of food generally, but glacier food comes earlier
# glacier food peaks in april-may, rain food peaks june-august
# rain things
max_prey_rain <- input$prey_amount/500 + 0.001
prey_index_rain <- max_prey_rain + 0.5 + max_prey_rain*sin(day_list/100+0.1) + rnorm(365, 0, 0.2)
prey_index_rain[which(prey_index_rain < 0)] <- 0.001 # make sure all above 0
prop_indg_rain <- rbinom(365, 100, input$prey_quality/100)/100
# glacier things -- same amount, diff period, but better quality food
max_prey_glcr <- input$prey_amount/500 + 0.001
prey_index_glcr <- max_prey_glcr + 0.5 + max_prey_glcr*sin(day_list/100+1) + rnorm(365, 0, 0.2)
prey_index_glcr[which(prey_index_glcr < 0)] <- 0.001 # make sure all above 0
prop_indg_glcr <- rbinom(365, 100, 0.1)/100
# run simulation
# rain river
sim_dat_rain <- coho_grow(rain_temps, prey_index_rain, prop_indg_rain, 365)
# glcr river
sim_dat_glcr <- coho_grow(glcr_temps, prey_index_glcr, prop_indg_glcr, 365)
# mixed river
sim_dat_combo <- move_grow(rain_temps, glcr_temps,
prey_index_rain, prey_index_glcr,
prop_indg_rain, prop_indg_glcr,
input$prop_glcr/100,
365)
dat_out <- data.frame(day = rep(1:length(sim_dat_combo), 3),
sal_size = c(sim_dat_rain, sim_dat_glcr, sim_dat_combo),
river_type = c(rep("Rain river", length(sim_dat_combo)),
rep("Glacier river", length(sim_dat_combo)),
rep("Movement between rivers", length(sim_dat_combo)))
)
return(dat_out)
})
output$about_text <- renderText(includeHTML("about_text.html"))
output$lesson_text <- renderText(includeHTML("lesson_text.html"))
output$prey_river_plot <- renderPlot({
plotData <- subset(reactive_data(), reactive_data()$river_type == "Rain river")
# reactive_data() %>% filter(river_type == "Rain river")
ggplot(plotData) +
geom_line(aes_string(x="day", y="sal_size", col="river_type")) +
labs(col="River type", y="Coho size (grams)") +
scale_color_manual(values = c("#95d840")) +
scale_linewidth_manual(values = c(1.5)) +
coord_cartesian(ylim = c(0, 18)) + # force fixed axis
theme_classic() + theme(text = element_text(size = 14),
legend.position = "bottom")
})
output$prey_quality_text <- renderText(includeHTML("prey_quality_text.html"))
output$one_river_plot <- renderPlot({
plotData <- subset(reactive_data(), reactive_data()$river_type == "Rain river")
# reactive_data() %>% filter(river_type == "Rain river")
ggplot(plotData) +
geom_line(aes_string(x="day", y="sal_size", col="river_type")) +
labs(col="River type", y="Coho size (grams)") +
scale_color_manual(values = c("#95d840")) +
scale_linewidth_manual(values = c(1.5)) +
coord_cartesian(ylim = c(0, 18)) + # force fixed axis
theme_classic() + theme(text = element_text(size = 14),
legend.position = "bottom")
})
output$temp_consump_text <- renderText(includeHTML("temp_consump_text.html"))
output$two_river_plot <- renderPlot({
ggplot(reactive_data()) +
geom_line(aes_string(x="day", y="sal_size", col="river_type")) +
labs(col="River type", y="Coho size (grams)") +
scale_color_manual(values = c("#33638d", "gray75", "#95d840")) +
scale_linewidth_manual(values = c(1.5)) +
coord_cartesian(ylim = c(0, 18)) + # force fixed axis
theme_classic() + theme(text = element_text(size = 14),
legend.position = "bottom")
})
output$warming_world_text <- renderText(includeHTML("warming_world_text.html"))
}
shinyApp(ui, server) # run the shiny
cards <- list(
# one river output
card(full_screen = TRUE,
card_header("Coho salmon growth"),
plotOutput(outputId = "prey_river_plot")),
card(full_screen = TRUE,
card_header("Coho salmon growth"),
plotOutput(outputId = "one_river_plot")),
# two river output
card(full_screen = TRUE,
card_header("Coho salmon growth"),
plotOutput(outputId = "two_river_plot"))
)
# for ui/server: https://shiny.posit.co/r/gallery/application-layout/shiny-theme-selector/
prey_amount <- sliderInput(
inputId = "prey_amount",
label = "Prey amount (qualitative):",
min = 1, max = 100,
value = 48, step = 0.5
)
prey_quality <- sliderInput(
inputId = "prey_quality",
label = "Prey quality (percent non-digestable):",
min = 0, max = 100,
value = 26, step = 0.5
)
rain_temp <- sliderInput(
inputId = "rain_temp",
label = "Rain river temperature:",
min = 46, max = 72,
value = 53, step = 0.5
)
glcr_temp <- sliderInput(
inputId = "glcr_temp",
label = "Glacier river temperature:",
min = 35, max = 61,
value = 39, step = 0.5
)
prop_glcr <- sliderInput(
inputId = "prop_glcr",
label = "Percent glacial streams:",
min = 0, max = 100,
value = 27, step = 0.5
)
ui = tagList(
# shinythemes::themeSelector(),
navbarPage(
theme = shinythemes::shinytheme("yeti"),
"Understanding SEAK Coho salmon growth",
tabPanel("About",
htmlOutput(outputId = "about_text") # drop in text
),
tabPanel("Lesson plans",
htmlOutput(outputId = "lesson_text") # drop in text
),
tabPanel("Prey quality",
sidebarPanel(
prey_amount,
prey_quality
),
mainPanel(cards[[1]],
htmlOutput(outputId = "prey_quality_text"))
),
tabPanel("Temperature & consumption",
sidebarPanel(
rain_temp,
prey_amount
),
mainPanel(cards[[2]],
htmlOutput(outputId = "temp_consump_text"))
),
tabPanel("A warming world",
sidebarPanel(
rain_temp,
glcr_temp,
prop_glcr
),
mainPanel(cards[[3]],
htmlOutput(outputId = "warming_world_text"))
)
))
server <- function(input, output, session) {
# run simulation with reactive data
reactive_data <- reactive({
day_list <- 1:365
rain_cels <- (input$rain_temp-32)*5/9
glcr_cels <- (input$glcr_temp-32)*5/9
# make time series
# glacier temps flatter, around 4 degrees year round
# rain temps more seasonal, from 0-10 degrees
max_rain_temp <- rain_cels; sin_max_rain_temp <- max_rain_temp/2
rain_temps <- sin_max_rain_temp + 1 + sin_max_rain_temp*sin(day_list/67) + rnorm(365, 0, 1)
rain_temps[which(rain_temps < 0)] <- 0.001 # make sure all above 0
max_glcr_temp <- glcr_cels; sin_max_glcr_temp <- max_glcr_temp/2
glcr_temps <- sin_max_glcr_temp + 1 + sin_max_glcr_temp*sin(day_list/80 - 99) + rnorm(365, 0, 1)
glcr_temps[which(glcr_temps < 0)] <- 0.001 # make sure all above 0
# both have same amount of food generally, but glacier food comes earlier
# glacier food peaks in april-may, rain food peaks june-august
# rain things
max_prey_rain <- input$prey_amount/500 + 0.001
prey_index_rain <- max_prey_rain + 0.5 + max_prey_rain*sin(day_list/100+0.1) + rnorm(365, 0, 0.2)
prey_index_rain[which(prey_index_rain < 0)] <- 0.001 # make sure all above 0
prop_indg_rain <- rbinom(365, 100, input$prey_quality/100)/100
# glacier things -- same amount, diff period, but better quality food
max_prey_glcr <- input$prey_amount/500 + 0.001
prey_index_glcr <- max_prey_glcr + 0.5 + max_prey_glcr*sin(day_list/100+1) + rnorm(365, 0, 0.2)
prey_index_glcr[which(prey_index_glcr < 0)] <- 0.001 # make sure all above 0
prop_indg_glcr <- rbinom(365, 100, 0.1)/100
# run simulation
# rain river
sim_dat_rain <- coho_grow(rain_temps, prey_index_rain, prop_indg_rain, 365)
# glcr river
sim_dat_glcr <- coho_grow(glcr_temps, prey_index_glcr, prop_indg_glcr, 365)
# mixed river
sim_dat_combo <- move_grow(rain_temps, glcr_temps,
prey_index_rain, prey_index_glcr,
prop_indg_rain, prop_indg_glcr,
input$prop_glcr/100,
365)
dat_out <- data.frame(day = rep(1:length(sim_dat_combo), 3),
sal_size = c(sim_dat_rain, sim_dat_glcr, sim_dat_combo),
river_type = c(rep("Rain river", length(sim_dat_combo)),
rep("Glacier river", length(sim_dat_combo)),
rep("Movement between rivers", length(sim_dat_combo)))
)
return(dat_out)
})
output$about_text <- renderText(includeHTML("about_text.html"))
output$lesson_text <- renderText(includeHTML("lesson_text.html"))
output$prey_river_plot <- renderPlot({
plotData <- subset(reactive_data(), reactive_data()$river_type == "Rain river")
# reactive_data() %>% filter(river_type == "Rain river")
ggplot(plotData) +
geom_line(aes_string(x="day", y="sal_size", col="river_type")) +
labs(col="River type", y="Coho size (grams)") +
scale_color_manual(values = c("#95d840")) +
scale_linewidth_manual(values = c(1.5)) +
coord_cartesian(ylim = c(0, 18)) + # force fixed axis
theme_classic() + theme(text = element_text(size = 14),
legend.position = "bottom")
})
output$prey_quality_text <- renderText(includeHTML("prey_quality_text.html"))
output$one_river_plot <- renderPlot({
plotData <- subset(reactive_data(), reactive_data()$river_type == "Rain river")
# reactive_data() %>% filter(river_type == "Rain river")
ggplot(plotData) +
geom_line(aes_string(x="day", y="sal_size", col="river_type")) +
labs(col="River type", y="Coho size (grams)") +
scale_color_manual(values = c("#95d840")) +
scale_linewidth_manual(values = c(1.5)) +
coord_cartesian(ylim = c(0, 18)) + # force fixed axis
theme_classic() + theme(text = element_text(size = 14),
legend.position = "bottom")
})
output$temp_consump_text <- renderText(includeHTML("temp_consump_text.html"))
output$two_river_plot <- renderPlot({
ggplot(reactive_data()) +
geom_line(aes_string(x="day", y="sal_size", col="river_type")) +
labs(col="River type", y="Coho size (grams)") +
scale_color_manual(values = c("#33638d", "gray75", "#95d840")) +
scale_linewidth_manual(values = c(1.5)) +
coord_cartesian(ylim = c(0, 18)) + # force fixed axis
theme_classic() + theme(text = element_text(size = 14),
legend.position = "bottom")
})
output$warming_world_text <- renderText(includeHTML("warming_world_text.html"))
}
shinyApp(ui, server) # run the shiny
